#
# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE file in the project.
#
scalar Long

#
# An auth directive for protecting data within an organization.
#
# Required arguments on decorated schema item: 'orgId'
#
directive @orgAuth(requires: RoleType = USER) on OBJECT | FIELD_DEFINITION
directive @auth on OBJECT | FIELD_DEFINITION

# TODO: most of these queries shold be updated to @orgAuth
# TODO: queries should have a single input params variable
type Query {
	#
	# Retrieve a list of organizations
	#
	organizations(offset: Int, limit: Int): [Organization!]! @auth

	#
	# Retrieve an organization by ID
	#
	organization(orgId: String!): Organization @auth

	#
	# Retrieve a User by ID
	#
	user(userId: String!): User @auth

	#
	# Retrieve a contact by ID
	#
	contact(contactId: String!): Contact @orgAuth

	#
	# Retrieve a list of contacts
	#
	contacts(orgId: String!, offset: Int, limit: Int): [Contact!]! @orgAuth

	#
	# Retrieve a single engagement by ID
	#
	engagement(engagementId: String!): Engagement @orgAuth

	#
	# Retrieve a list of active engagements
	#
	# If an `userId` is provided, filter out engagements assigned to it.
	#
	activeEngagements(orgId: String!, userId: String, offset: Int, limit: Int): [Engagement!]!
		@orgAuth

	#
	# Retrieve a list of active engagements assigned to a user
	#
	userActiveEngagements(orgId: String!, userId: String!, offset: Int, limit: Int): [Engagement!]!
		@orgAuth

	#
	# Retrieve a list of inactive engagements (i.e. Closed, Completed)
	#
	inactiveEngagements(orgId: String!, offset: Int, limit: Int): [Engagement!]! @orgAuth

	#
	# Retrieve a list of engagements
	#
	allEngagements(orgId: String!): [Engagement!]! @orgAuth(requires: ADMIN)

	#
	# Retrieve a list of services
	#
	services(orgId: String!): [Service!] @orgAuth

	#
	# Retrieve a list of services
	#
	serviceAnswers(serviceId: String!, offset: Int, limit: Int): [ServiceAnswer!]
		@orgAuth(requires: ADMIN)
}

type Mutation {
	#
	# Authenticate a user
	#
	authenticate(username: String!, password: String!): AuthenticationResponse!

	#
	# Initiate a password reset
	#
	initiatePasswordReset(email: String!): VoidResponse!

	#
	# Executes a password reset
	#
	executePasswordReset(resetToken: String!, newPassword: String!): VoidResponse!

	#
	# Reset user password
	#
	resetUserPassword(userId: String!): UserResponse @auth @orgAuth(requires: ADMIN)

	#
	# Allow user to set password
	#
	setUserPassword(oldPassword: String!, newPassword: String!): UserResponse @auth

	#
	# Create a new user
	#
	createNewUser(user: UserInput!): UserResponse @auth

	#
	# Update user details
	#
	updateUser(user: UserInput!): UserResponse @auth

	#
	# Delete user
	#
	deleteUser(userId: String!): VoidResponse @orgAuth(requires: ADMIN)

	#
	# Update User Preferences
	#
	updateUserPreferences(userId: String!, preferences: String!): VoidResponse @auth

	#
	# Update user FCM Token
	#
	updateUserFCMToken(fcmToken: String!): VoidResponse @auth

	#
	# Mark mention as seen
	#
	markMentionSeen(
		userId: String!
		# Marks all mentions seen
		markAll: Boolean
		# EngagementId + CreatedAt locate an individual mention
		engagementId: String
		createdAt: String
	): UserResponse @auth

	#
	# Mark mention as dismissed
	#
	markMentionDismissed(
		userId: String!
		# Marks all mentions dismissed
		dismissAll: Boolean
		# EngagementId + CreatedAt locate an individual mention
		engagementId: String
		createdAt: String
	): UserResponse @auth

	#
	# Assign an Engagement
	#
	assignEngagement(engagementId: String!, userId: String!): EngagementResponse @orgAuth

	#
	# Create Engagement
	#
	createEngagement(engagement: EngagementInput!): EngagementResponse @orgAuth

	#
	# Update Engagement
	#
	updateEngagement(engagement: EngagementInput!): EngagementResponse @orgAuth

	#
	# Set engagement status
	#
	completeEngagement(engagementId: String!): EngagementResponse @orgAuth

	#
	# Set engagement status
	#
	setEngagementStatus(engagementId: String!, status: EngagementStatus!): EngagementResponse @orgAuth

	#
	# Add engagement action
	#
	addEngagementAction(engagementId: String!, action: ActionInput!): EngagementResponse @auth

	#
	# Create new organization tag
	#
	createNewTag(tag: TagInput!): TagResponse @orgAuth(requires: ADMIN)

	#
	# Update organization tag
	#
	updateTag(tag: TagInput!): TagResponse @orgAuth(requires: ADMIN)

	#
	# Create a new contact
	#
	createContact(contact: ContactInput!): ContactResponse @orgAuth

	#
	# Update existing contact details
	#
	updateContact(contact: ContactInput!): ContactResponse @orgAuth

	#
	# Archive contact
	#
	archiveContact(contactId: String!): VoidResponse @orgAuth

	#
	# Create a new Service
	#
	createService(service: ServiceInput!): ServiceResponse @orgAuth

	#
	# Update a Service
	#
	updateService(service: ServiceInput!): ServiceResponse @orgAuth

	#
	# Create a new Service Answers
	#
	createServiceAnswer(serviceAnswer: ServiceAnswerInput!): ServiceAnswerResponse @orgAuth

	#
	# Delete a Service Answer
	#
	deleteServiceAnswer(answerId: String!): VoidResponse @orgAuth

	#
	# Update a Service Answer
	#
	updateServiceAnswer(serviceAnswer: ServiceAnswerInput!): ServiceAnswerResponse @orgAuth
}

type Subscription {
	#
	# Subscribe to user notificaitons
	#
	mentions(userId: String!): MentionEvent

	#
	# Subscribe to engagement updates
	#
	engagements(orgId: String!): EngagementResponse
}

#
# Mention Subscription Response
#
type MentionEvent {
	#
	# The user that has been authenticated; possibly null
	#
	mention: Mention

	#
	# If returned from an update the update may include the type of update (CREATE)
	#
	action: String

	#
	# An error or status message regarding the authentication attempt
	#
	message: String!

	#
	# Status code response
	#
	statusCode: Int
}

#
# Used for mutations that do not return data
#
type VoidResponse {
	#
	# An error or status message regarding the attempted request
	#
	message: String!
}

#
# An Engagement Response
#
type EngagementResponse {
	#
	# The user that has been authenticated; possibly null
	#
	engagement: Engagement

	#
	# If returned from an update the update may include the type of update (CREATE, UPDATE, DELETE)
	#
	action: String

	#
	# An error or status message regarding the authentication attempt
	#
	message: String!
}

#
# An Authentication Response
#
type AuthenticationResponse {
	#
	# The user that has been authenticated; possibly null
	#
	user: User

	#
	# An error or status message regarding the authentication attempt
	#
	message: String

	#
	# The user access token
	#
	accessToken: String
}

#
# A Community-Based Organization
#
type Organization {
	#
	# A unique identifier for the organization
	#
	id: String!

	#
	# The organization Name
	#
	name: String!

	#
	# A brief description of the organization and its mission
	#
	description: String!

	#
	# Users working with the organization
	#
	users: [User!] @orgAuth

	#
	# Contact working with the organization
	#
	contacts: [Contact!] @orgAuth

	#
	# Tags available to the organization
	#
	tags: [Tag!] @orgAuth
}

#
# List of possible groupings of tags
#
enum TagCategory {
	SDOH
	PROGRAM
	GRANT
	OTHER
	# TODO: what's the different between "other" and "all"?
	ALL
}

#
# A label to group engagements and actions
#
type Tag {
	#
	# A unique id for the tag
	#
	id: String!

	#
	# Id of the org that the tag was created in
	#
	orgId: String!

	#
	# An object containing translated labels for the tag
	#
	label: String!

	#
	# An object containing description for the tag
	#
	description: String

	#
	# A string identifying the categoy of the tag
	#
	category: TagCategory

	#
	# An object containing usage counts for the Tag
	#
	usageCount: TagUsageCount
}

type TagUsageCount {
	engagements: Int
	serviceEntries: Int
	clients: Int
	total: Int
}

#
# Create engagement input
#
input EngagementInput {
	#
	# ID of the engagement request
	#
	engagementId: String
	#
	# ID of the org containing the engagement
	#
	orgId: String!

	#
	# ID of the contact who the engagement is being made for
	#
	contactIds: [String!]!

	#
	# Title of engagement request
	#
	title: String!

	#
	# Description of engagement request
	#
	description: String!

	#
	# Scheduled end date of the request
	#
	endDate: String

	#
	# Optional id of assigned specialist to the engagement
	#
	userId: String

	#
	# Optional tags on the engagement
	#
	tags: [String!]
}

#
# A label to group engagements and actions
#
input TagInput {
	#
	# A unique id for the tag
	#
	id: String

	#
	# A unique identifier for the organization where a tag belongs
	#
	orgId: String!

	#
	# A string containing translated labels for the tag
	#
	label: String

	#
	# A string containing description for the tag
	#
	description: String

	#
	# A string containing category for the tag
	#
	category: TagCategory
}

type TagResponse {
	tag: Tag

	message: String
}

#
# An object that contains translations of a string
#
# type TranslateString {
#	en_us: String
#	ko_kr: String
#	vi_vn: String
#	zh_cn: String
#	es_us: String
#	de_de: String
#	es_es: String
#	fi_fi: String
#	fr_fr: String
#	he_il: String
#	it_it: String
#	ja_jp: String
#	pt_pt: String
#	sv_se: String
#	th_th: String
# }

#
# A specialist who can provide services for clients of a CBO
#
type User {
	oid: ID
	#
	# A unique identifier for the specialist
	#
	id: String!

	#
	# A name for a person
	#
	name: Name!

	#
	# A user name for a person
	#
	userName: String!

	#
	# The roles this user has in the system
	#
	roles: [Role!]!

	#
	# The description of this user has in the system
	#
	description: String

	#
	# Additional information this user has in the system
	#
	additionalInfo: String

	#
	# The address of this user has in the system
	#
	address: Address

	#
	# The user email
	#
	email: String

	#
	# The user phone
	#
	phone: String

	#
	# Number of engagements for user, null if not available
	#
	engagementCounts: EngagementCounts

	#
	# Mentions of this user in engagments
	#
	mentions: [Mention!]!

	#
	# Forgot password token
	#
	forgotPasswordToken: String

	#
	# UI/UX preferences of an User
	#
	preferences: String
}

#
# Basic class to model @mentions
#

type Mention {
	engagement: Engagement
	createdAt: String!
	createdBy: User
	message: String
	seen: Boolean!
	dismissed: Boolean!
	# TODO: add these fields to mentions
	# user: User!
	# message: String
	# type: 'ASSIGNED' | 'TAGGED'
}

type EngagementCounts {
	active: Int
	closed: Int
}

input UserInput {
	#
	# ID field for the user, incase this is for udpating existing user
	#
	id: String

	#
	# The first name for a person
	#
	first: String!

	#
	# The middle name for a person
	#
	middle: String

	#
	# The last name for a person
	#
	last: String!

	#
	# The username for a person
	#
	userName: String!

	#
	# The roles this user has in the system
	#
	roles: [RoleTypeInput!]

	#
	# The user email
	#
	email: String!

	#
	# The user phone
	#
	phone: String

	#
	# The user address
	#
	address: AddressInput

	#
	# The user basic description / bio
	#
	description: String

	#
	# The user additional info / trainings / achievements
	#
	additionalInfo: String

	#
	# FCM token used for push notifications
	#
	fcmToken: String
}

input AddressInput {
	#
	# Street address
	#
	street: String

	#
	# Street address line 2
	#
	unit: String

	#
	# City
	#
	city: String

	#
	# County
	#
	county: String

	#
	# State
	#
	state: String

	#
	# Zip code
	#
	zip: String
}

input RoleTypeInput {
	roleType: RoleType!
	orgId: String!
}

type UserResponse {
	user: User
	message: String
}

type Role {
	#
	# The kind of role the user has
	#
	roleType: RoleType!

	#
	# The organization the role relates to
	#
	orgId: String!
}

enum RoleType {
	USER
	ADMIN
	VIEWER
}

type Address {
	#
	# Street address
	#
	street: String!

	#
	# Street address line 2
	#
	unit: String

	#
	# City
	#
	city: String

	#
	# County
	#
	county: String

	#
	# State
	#
	state: String

	#
	# The organization the role relates to
	#
	zip: String!
}

#
# A person coming into the system who is in need of assistance or resources
#
type Contact {
	#
	# A unique identifier for a contact
	#
	id: String!

	#
	# The contact name
	#
	name: Name!

	#
	# The contact email
	#
	email: String

	#
	# The contact phone
	#
	phone: String

	#
	# The contact address
	#
	address: Address

	#
	# The date of birth
	#
	dateOfBirth: String

	#
	# Engagements this contact has made with Orgs
	#
	engagements(orgId: String): [Engagement!]!

	#
	# Contact tags
	#
	tags: [Tag!]

	#
	# Contact status
	#
	status: ContactStatus

	#
	# Demographics of the contact
	#
	demographics: Demographics

	#
	# Notes related to the contact
	#
	notes: String
}

type Demographics {
	gender: String
	genderOther: String
	ethnicity: String
	ethnicityOther: String
	race: String
	raceOther: String
	preferredContactMethod: String
	preferredLanguage: String
	preferredLanguageOther: String
	preferredContactTime: String
}

input DemographicsInput {
	gender: String
	genderOther: String
	ethnicity: String
	ethnicityOther: String
	race: String
	raceOther: String
	preferredLanguage: String
	preferredLanguageOther: String
	preferredContactMethod: String
	preferredContactTime: String
}

input ContactInput {
	#
	# A unique identifier for a contact
	#
	id: String

	#
	# A unique identifier for the organization where a contact belongs
	#
	orgId: String!

	#
	# The first name for a person
	#
	first: String!

	#
	# The middle name for a person
	#
	middle: String

	#
	# The last name for a person
	#
	last: String!

	#
	# The date of birth
	#
	dateOfBirth: String

	#
	# The contact email
	#
	email: String

	#
	# The contact phone
	#
	phone: String

	#
	# The contact address
	#
	address: AddressInput

	#
	# the contact tags
	#
	tags: [String!]

	#
	# Contact status
	#
	status: ContactStatus

	#
	# The contact demographics
	#
	demographics: DemographicsInput

	#
	# Notes related to the contact
	#
	notes: String
}

type ContactResponse {
	contact: Contact
	message: String
}

#
# Engagement Status
#
enum EngagementStatus {
	NOT_STARTED
	OPEN
	CLOSED
	PENDING
	ASSIGNED
	IN_PROGRESS
	COMPLETED
}

#
# A contact's engagement with a CBO
#
type Engagement {
	#
	# ID of the engagement
	#
	id: String!

	#
	# The ID of the organization being engaged
	#
	orgId: String!

	#
	# The assigned specialist. Undefined if not the engagement is not assigned
	#
	user: User

	#
	# The start date of the engagement
	#
	startDate: String!

	#
	# The end date of the engagement
	#
	endDate: String

	#
	# Engagement Actions
	#
	actions: [Action!]!

	#
	# Engagement Status
	#
	status: EngagementStatus!

	#
	# Engagement Contacts
	#
	contacts: [Contact!]!

	#
	# Engagement Title
	#
	title: String!

	#
	# Engagement Description
	#
	description: String

	#
	# Tags applied to the engagement
	#
	tags: [Tag!]!
}

#
# Input for adding an action
#
input ActionInput {
	#
	# The id of the user engaging the contact
	#
	userId: String!

	#
	# The id of the organization engaging the contact
	#
	orgId: String!

	#
	# A comment entered by the specialist
	#
	comment: String!

	#
	# Tagged user to be notified of action
	#
	taggedUserId: String

	#
	# Tags applied to the action
	#
	tags: [String!]
}

type Action {
	user: User!

	#
	# The id of the organization engaging the contact
	#
	orgId: String!

	#
	# The date the action was taken
	#
	date: String!

	#
	# A comment entered by the specialist
	#
	comment: String

	#
	# Tagged user to be notified of action
	#
	taggedUser: User

	#
	# Tags applied to the action
	#
	tags: [Tag!]!
}

#
# A name for a person
#
type Name {
	#
	# A person's first name
	#
	first: String!
	#
	# A person's last name
	#
	last: String!
	#
	# A person's middle name
	#
	middle: String
}

enum ServiceFieldType {
	DATE
	NUMBER
	SINGLE_TEXT
	MULTILINE_TEXT
	SINGLE_CHOICE
	MULTI_CHOICE
	# this field type has not been implemented - TBD, what kind of field is this?
	#MULTI_TEXT
}

enum ServiceFieldRequirement {
	REQUIRED
	OPTIONAL
}

enum ServiceStatus {
	ACTIVE
	INACTIVE
	CLOSED
	ARCHIVE
}

enum ContactStatus {
	ACTIVE
	ARCHIVED
}

type Service {
	id: String!
	orgId: String!
	name: String!
	description: String
	tags: [Tag!]!
	fields: [ServiceField!]!
	status: ServiceStatus!
	contactFormEnabled: Boolean!
}

input ServiceInput {
	id: String
	orgId: String!
	name: String!
	description: String
	tags: [String!]
	fields: [ServiceFieldInput!]
	status: ServiceStatus!
	contactFormEnabled: Boolean!
}

type ServiceField {
	id: String!
	name: String!
	type: ServiceFieldType!
	requirement: ServiceFieldRequirement!
	inputs: [ServiceFieldValue!]!
}

input ServiceFieldInput {
	id: String
	name: String!
	type: ServiceFieldType!
	requirement: ServiceFieldRequirement!
	inputs: [ServiceFieldValueInput!]
}

type ServiceFieldValue {
	id: String!
	label: String!
}

input ServiceFieldValueInput {
	id: String
	label: String!
}

type ServiceAnswer {
	id: String!
	serviceId: String!
	contacts: [Contact!]!
	fields: [ServiceAnswerField!]!
}

input ServiceAnswerInput {
	id: String
	serviceId: String!
	contacts: [String!]
	fields: [ServiceAnswerFieldInput!]!
}

type ServiceAnswerField {
	fieldId: String!
	# Either value or values may be populated depending on if single or multi
	value: String
	values: [String!]
}

input ServiceAnswerFieldInput {
	fieldId: String!
	# Either value or values may be populated depending on if single or multi
	value: String
	values: [String!]
}

type ServiceResponse {
	message: String
	service: Service
}

type ServiceAnswerResponse {
	message: String
	serviceAnswer: ServiceAnswer
}
